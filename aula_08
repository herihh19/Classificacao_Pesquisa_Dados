#1. Implemente o algoritmo de busca binária:

#a. de forma iterativa;
def busca_binaria_iterativa(arr, x):
    inicio, fim = 0, len(arr) - 1
    while inicio <= fim:
        meio = (inicio + fim) // 2
        if arr[meio] == x: return meio
        elif arr[meio] < x: inicio = meio + 1
        else: fim = meio - 1
    return -1

#b. de forma recursiva.
def busca_binaria_recursiva(arr, x, inicio=0, fim=None):
    if fim is None: fim = len(arr) - 1
    if inicio > fim: return -1
    meio = (inicio + fim) // 2
    if arr[meio] == x: return meio
    elif arr[meio] < x: return busca_binaria_recursiva(arr, x, meio + 1, fim)
    else: return busca_binaria_recursiva(arr, x, inicio, meio - 1)

#2. Implemente os métodos adicionais vistos em aula:
#a. Pesquisa por salto:
import math

def pesquisa_por_salto(arr, x):
    n, salto = len(arr), int(math.sqrt(len(arr)))
    for i in range(0, n, salto):
        if arr[i] >= x:
            for j in range(max(0, i - salto), min(i + 1, n)):
                if arr[j] == x: return j
            return -1
    return -1

#b. Pesquisa Fibonacci:
def pesquisa_fibonacci(arr, x):
    fib_m2, fib_m1 = 0, 1
    fib_m = fib_m1 + fib_m2
    n, offset = len(arr), -1

    while fib_m < n:
        fib_m2, fib_m1 = fib_m1, fib_m
        fib_m = fib_m1 + fib_m2

    while fib_m > 1:
        i = min(offset + fib_m2, n - 1)
        if arr[i] < x:
            fib_m, fib_m1, fib_m2 = fib_m1, fib_m2, fib_m - fib_m1
            offset = i
        elif arr[i] > x:
            fib_m, fib_m1, fib_m2 = fib_m2, fib_m1 - fib_m2, fib_m - fib_m1
        else: return i
    return offset + 1 if fib_m1 and arr[offset + 1] == x else -1


#3. Faça um teste de desempenho considerando um conjunto de 10k números. Questões de Reflexão:

#a. Qual método teve o menor número de comparações em média?
O método com menos comparações varia com o tamanho da lista e a posição do elemento. Em listas ordenadas, a busca binária é mais rápida,já a busca Fibonacci pode superar o Jump Search em alguns casos.
#b. Em quais situações você acha que cada método seria mais apropriado?
A busca binária é melhor para listas grandes e ordenadas; o Jump Search é melhor em listas onde o acesso aleatório é lento; a busca Fibonacci é boa para listas ordenadas com acesso restrito.
#c. Como a ordenação da lista afeta a eficiência de cada método?
Em listas desordenadas, nenhum desses métodos é eficiente.

